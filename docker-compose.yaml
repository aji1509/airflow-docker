# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
version: '3'
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: airflow.dockerfile
    args:
      - AIRFLOW_VERSION=${AIRFLOW_VERSION}
      - PYTHON_VERSION=${PYTHON_VERSION}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 81HqDtbqAywKSOumSha3BhWNOdQ26slT6K0YaZeZyPs=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__RBAC: 'true'
    _AIRFLOW_DB_MIGRATE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME:-airflow}
    _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD:-airflow}
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 10
    AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: 1800
    AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: 5
    AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_TIMEOUT: 30
    AIRFLOW__DATABASE__SQL_ALCHEMY_RETRY_LIMIT: 10
    AIRFLOW__DATABASE__SQL_ALCHEMY_RETRY_DELAY: 5
    AIRFLOW__WEBSERVER__RATE_LIMIT_STORAGE_URI: "redis://:@redis:6379/1"
    FLASK_APP_RATE_LIMIT_STORAGE_URI: "redis://:@redis:6379/1"
    FLASK_LIMITER_STORAGE_URI: "redis://:@redis:6379/1"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./sql:/opt/airflow/sql
    - ./scripts:/opt/airflow/scripts
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
      POSTGRES_MULTIPLE_DATABASES: airflow
    volumes:
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 30s
      retries: 10
    restart: always
    command: >
      bash -c "chmod +x /docker-entrypoint-initdb.d/*.sh && 
              docker-entrypoint.sh postgres"

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
  
  superset:
    image: apache/superset:latest
    platform: linux/amd64
    environment:
      SUPERSET_SECRET_KEY: 123abc
    ports:
      - 8091:8088
  
  minio:
    image: minio/minio:latest
    platform: linux/amd64
    container_name: minio
    command: minio server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: "airflow123"
      MINIO_ROOT_PASSWORD: "airflow123"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - ./data:/data

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 30s
      retries: 10
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
    - -c
    - |
      function ver() {
        printf "%04d%04d%04d%04d" $${1//./ }
      }
      airflow_version=$$(gosu airflow airflow version)
      airflow_version_comparable=$$(ver $${airflow_version})
      min_airflow_version=2.2.0
      min_airflow_version_comparable=$$(ver $${min_airflow_version})
      if (( airflow_version_comparable < min_airflow_version_comparable )); then
        echo
        echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
        echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
        echo
        exit 1
      fi
      if [[ -z "${AIRFLOW_UID}" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        echo "If you are on Linux, you SHOULD follow the instructions below to set "
        echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
        echo "For other operating systems you can get rid of the warning with manually created .env file:"
        echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
        echo
      fi
      one_meg=1048576
      mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
      cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
      disk_available=$$(df / | tail -1 | awk '{print $$4}')
      warning_resources="false"
      if (( mem_available < 4000 )) ; then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
        echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
        echo
        warning_resources="true"
      fi
      if (( cpus_available < 2 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
        echo "At least 2 CPUs recommended. You have $${cpus_available}"
        echo
        warning_resources="true"
      fi
      if (( disk_available < one_meg * 10 )); then
        echo
        echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
        echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
        echo
        warning_resources="true"
      fi
      if [[ $${warning_resources} == "true" ]]; then
        echo
        echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
        echo "Please follow the instructions to increase amount of resources available:"
        echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
        echo
      fi
      mkdir -p /sources/logs /sources/dags /sources/plugins /sources/scripts
      chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,scripts}
      
      # Create directories and fix permissions
      mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/scripts
      chown -R "${AIRFLOW_UID}:0" /opt/airflow
      
      # Display Airflow version
      gosu airflow airflow version
      
      sleep 10
      
      # Wait for the postgres service to be ready
      echo "Waiting for Postgres to be ready..."
      while ! nc -z postgres 5432; do
        sleep 1
      done
      
      echo "Postgres is ready. Initializing Airflow db..."
      gosu airflow airflow db migrate
      
      # Check if connection already exists before adding
      echo "Setting up connections..."
      if ! gosu airflow airflow connections get postgres_new > /dev/null 2>&1; then
        gosu airflow airflow connections add 'postgres_new' \
          --conn-uri "postgres://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres:5432/${POSTGRES_DB:-airflow}"
      else
        echo "Connection postgres_new already exists. Skipping creation."
      fi
      
      # Create admin user
      echo "Creating admin user if not exists..."
      gosu airflow airflow users create \
        --username ${_AIRFLOW_WWW_USER_USERNAME} \
        --firstname Admin \
        --lastname User \
        --role Admin \
        --email admin@example.com \
        --password ${_AIRFLOW_WWW_USER_PASSWORD} \
        || echo "User may already exist"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    user: "0:0"
    volumes:
      - .:/sources
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
volumes:
  postgres-db-volume:

